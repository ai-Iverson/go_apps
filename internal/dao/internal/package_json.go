// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// PackageJsonDao is the data access object for table package_json.
type PackageJsonDao struct {
	table   string             // table is the underlying table name of the DAO.
	group   string             // group is the database configuration group name of current DAO.
	columns PackageJsonColumns // columns contains all the column names of Table for convenient usage.
}

// PackageJsonColumns defines and stores column names for table package_json.
type PackageJsonColumns struct {
	CreatedAt string //
	UpdatedAt string //
	IsDeleted string //
	VersionId string // 版本 ID
	Info      string // erpxa文件信息
	Type      string // 应用类型
	Id        string //
}

//  packageJsonColumns holds the columns for table package_json.
var packageJsonColumns = PackageJsonColumns{
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	IsDeleted: "is_deleted",
	VersionId: "version_id",
	Info:      "info",
	Type:      "type",
	Id:        "id",
}

// NewPackageJsonDao creates and returns a new DAO object for table data access.
func NewPackageJsonDao() *PackageJsonDao {
	return &PackageJsonDao{
		group:   "default",
		table:   "package_json",
		columns: packageJsonColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *PackageJsonDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *PackageJsonDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *PackageJsonDao) Columns() PackageJsonColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *PackageJsonDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *PackageJsonDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *PackageJsonDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
